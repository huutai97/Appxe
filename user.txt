var express = require('express');
var router = express.Router();
const {resolve} = require('path');
const con = require(resolve('./configs/database'));
const bcrypt = require('bcrypt');
const session = require('express-session');
const jwt = require('jsonwebtoken');
const { query } = require('express');
const auth = require(resolve('./configs/auth'))
const randtoken = require('rand-token');
const nodemailer = require("nodemailer");
const {OAuth2Client} = require('google-auth-library');



const GOOGLE_MAILER_CLIENT_ID = '293723439123-u6020cu4rt3ifal8behj8g6o4mvqlij0.apps.googleusercontent.com'
const GOOGLE_MAILER_CLIENT_SECRET = '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'
const GOOGLE_MAILER_REFRESH_TOKEN = '1//045YNbu5gXuiGCgYIARAAGAQSNwF-L9IrZiyVjGZFyv4TzcSSh2MRxKx57YrX64v3drFq7TuITU3f1XWd7SREo_Wc_4VPYP1JToM'
const ADMIN_EMAIL_ADDRESS = 'bihackquai@gmail.com'

const myOAuth2Client = new OAuth2Client(
    GOOGLE_MAILER_CLIENT_ID,
    GOOGLE_MAILER_CLIENT_SECRET
  )

myOAuth2Client.setCredentials({
    refresh_token: GOOGLE_MAILER_REFRESH_TOKEN
})


router.get("/",auth.protectUser, (req,res) => {
   con.query(`select * from users`,(err,result)=>{
    let data = result
    res.status(200).json({status:200,data:data})
   })
})

router.post('/rs-password',async(req,res,next)=>{
    const {email} = req.body

    var randToken = randToken;
    const myAccessTokenObject = await myOAuth2Client.getAccessToken()
    const myAccessToken = myAccessTokenObject?.token
    var transport = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          type: 'OAuth2',
          user: ADMIN_EMAIL_ADDRESS,
          clientId: GOOGLE_MAILER_CLIENT_ID,
          clientSecret: GOOGLE_MAILER_CLIENT_SECRET,
          refresh_token: GOOGLE_MAILER_REFRESH_TOKEN,
          accessToken: myAccessToken
        }
    });
    var mailOptions = {
        from : 'bihackquai@gmail.com',
        to: email,
        subject: 'Reset Password Link - Nguyễn Hữu Tài',
        html: '<p>You requested for reset password, kindly use this <a href="http://localhost:8000/reset-password?token=' + randToken + '">link</a> to reset your password</p>'
   
    };
    const sql = `select * from users where email=`+ `${con.escape(email)}`;
    con.query(sql,(err,result)=>{
        if(err) throw err
        let [data] = result
        console.log(data.email.length > 0)
        if(data.email.length > 0){
            var randTokens = randtoken.generate(20);
             transport.sendMail(mailOptions,randTokens)
            res.json({message:"email was sent"})
        }
           
    })
})

router.post("/dang-ky",async (req,res) => {
    const {uuid, ten, matkhau, role, email, trangthai} = req.body
    const bcryptPassword = await bcrypt.hash(matkhau,10)
    const sql = `insert into users (uuid, ten, matkhau, role, email, trangthai) values (${con.escape(uuid)},${con.escape(ten)},${con.escape(bcryptPassword)},${con.escape(role)},${con.escape(email)},${con.escape(trangthai)})`
    con.query(sql,(err,result)=>{
        if(err) throw err
        let data = result;
        res.status(200).json({status:200,data:data});
    })
})

router.post('/dang-nhap',(req,res,next)=>{
    const { ten, matkhau} = req.body;
    if(ten,matkhau){
        const sql = `select id, ten, matkhau from users where ten = ${con.escape(ten)}`;
        con.query(sql,async (err,result)=>{
            if(err) throw err
            let [data] = result;
            if(data){
                const checkPassword = await bcrypt.compare(matkhau,data.matkhau);
                if(checkPassword){
                    var token = jwt.sign({id:result[0].id},'the-super-strong-secrect',{ expiresIn: '60s' });
                    con.query(
                    `UPDATE users SET last_login = now() WHERE id = '${result[0].id}'`
                    );
                    req.session.id = data.id;
                    res.cookie('access_token',token,{
                        maxAge: Date.now() + 24 * 60 * 60 * 1000,
                        httpOnly: true
                        })
                        .json({
                        result: true,token,
                    })
                }
                else{
                    res.json({message:'Mật khẩu không đúng'});
                }
            }else{
                res.json({messgae:'Tên tài khoản không đúng'});
            }
        })
    }
    else{
        res.json({message:'Vừa có lỗi gì đó xảy ra...'})
    }
})

router.post('/doi-mat-khau/:id', (req,res,next)=>{
    const id = req.params.id;
    const {matkhau, xacnhanmk, matkhaucu} = req.body;
    const sql = `select * from users where id= ` + `${con.escape(id)}`;
    con.query(sql,async (err,result)=>{
        if(err) throw err
        let [data] = result
        const passwordOld = data.matkhau
        const matkhaucune= await bcrypt.compare(matkhaucu,passwordOld)
        if(!matkhaucune){
            res.json({message:'Mật khẩu cũ của bạn không đúng'})
        }
        else{
            if(matkhau != xacnhanmk ){
                res.json({message:'Mật khẩu xác nhận không đúng'})
            }else{
                const confirmPassword= await bcrypt.hash(xacnhanmk,10)
                const sql2 = `UPDATE users SET matkhau =  (${con.escape(confirmPassword)}) where id=` + `${con.escape(id)}`;
                con.query(sql2,(err,result)=>{
                    if(err) throw err
                    res.json({message:'Thay đổi mật khẩu thành công'})
                })
            }
        }
    }) 
})

router.put("/:id", (req,res) => {
    const {uuid, ten, matkhau, role, email} = req.body
    const sql= `update users set uuid = ${con.escape(uuid)}, ten = ${con.escape(ten)}, matkhau = ${con.escape(matkhau)}, role = ${role}, email= ${con.escape(email)}`
    con.query(sql,(err,result)=>{
        if(err) throw err
        let data = result;
        res.status(200).json({status:200,data:data});
    })
})

router.delete("/delete-user/:id", (req,res) => {
    id = req.params.id;
    sql = `select * from users where id= ` + `${con.escape(id)}`;
    con.query(sql,(err,result)=>{
        if(err) throw err;
        let data = result;
        res.json({status:200,message:'User has been delete'})
    })
})

router.get("/thanh-vien/:id", (req,res) => {
    const id = req.params.id;
    const sql = `select * from users where id=` + `${con.escape(id)}`;
    con.query(sql,(err,resutl)=>{
        if(err) throw err
        let data = result;
        res.status(200).json({status:200,data:data})
    })
})

router.get('/user-status/:status/:id',(req,res)=>{
    const id = req.params.id;
    const status = req.params.status;
    let currenStatus = (status === 'active') ? "inactive" : "active";
    const sql = `UPDATE users set trangthai = (${con.escape(currenStatus)}) where id= `+ `${con.escape(id)}`;
    con.query(sql,(err,result)=>{
        if(err) throw err;
        let data = result
        res.status(200).json({status:200,data:data})
    })
})


router.get('/logout',(req,res)=>{
    return res
    .cookie('access_token','none')
    .clearCookie('access_token')
    .status(200)
    .json({message: "hẹn gặp lại"})
 })
 
module.exports = router